# Nome do workflow que aparecerá na aba "Actions" do GitHub
name: JavaScript Linter (ESLint)

# Gatilhos: quando este workflow deve rodar
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ID do job, usado na regra de proteção de branch
  lint-backend:
    # Nome de exibição do job
    name: lint-backend
    
    # O workflow rodará em uma máquina virtual Linux (Ubuntu)
    runs-on: ubuntu-latest

    # Define o diretório de trabalho padrão para os comandos 'run'
    # Baseado no erro, este é o caminho mais provável para sua pasta backend.
    defaults:
      run:
        working-directory: ./UTFlix/backend

    steps:
    # 1. Clona o seu repositório para dentro da máquina virtual
    - name: Checkout repository
      uses: actions/checkout@v4

    # 2. PASSO DE DEBUG: Lista todos os arquivos e pastas recursivamente
    #    Isso vai nos mostrar a estrutura exata do seu projeto.
    - name: Debug - List all files recursively
      run: ls -R
      # A linha abaixo força este comando a rodar na raiz do projeto, ignorando o 'defaults'
      working-directory: .

    # 3. Configura a versão do Node.js (sem cache)
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'

    # 4. Instala as dependências a partir do lockfile
    #    (Será executado dentro de ./UTFlix/backend por causa do 'defaults')
    - name: Install dependencies
      run: npm ci

    # 5. Roda o ESLint para validar o código
    #    (Também será executado dentro de ./UTFlix/backend)
    - name: Run ESLint
      run: npm run lint
